{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class LocalStorageService {\n  constructor() {}\n  setItem(key, value) {\n    try {\n      const serializedValue = JSON.stringify(value);\n      localStorage.setItem(key, serializedValue);\n    } catch (error) {\n      console.error('Error saving to localStorage', error);\n    }\n  }\n  getItem(key, defaultValue) {\n    try {\n      const item = localStorage.getItem(key);\n      return item ? JSON.parse(item) : defaultValue;\n    } catch (error) {\n      console.error('Error reading from localStorage', error);\n      return defaultValue;\n    }\n  }\n  removeItem(key) {\n    try {\n      localStorage.removeItem(key);\n    } catch (error) {\n      console.error('Error removing from localStorage', error);\n    }\n  }\n  clear() {\n    try {\n      localStorage.clear();\n    } catch (error) {\n      console.error('Error clearing localStorage', error);\n    }\n  }\n  static #_ = this.ɵfac = function LocalStorageService_Factory(t) {\n    return new (t || LocalStorageService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LocalStorageService,\n    factory: LocalStorageService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["LocalStorageService","constructor","setItem","key","value","serializedValue","JSON","stringify","localStorage","error","console","getItem","defaultValue","item","parse","removeItem","clear","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\apps\\fibonacci-clock-24h-60min-merged\\src\\app\\services\\local-storage.service.ts"],"sourcesContent":["// src/app/services/local-storage.service.ts\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LocalStorageService {\r\n\r\n  constructor() { }\r\n\r\n  setItem(key: string, value: any): void {\r\n    try {\r\n      const serializedValue = JSON.stringify(value);\r\n      localStorage.setItem(key, serializedValue);\r\n    } catch (error) {\r\n      console.error('Error saving to localStorage', error);\r\n    }\r\n  }\r\n\r\n  getItem<T>(key: string, defaultValue: T): T {\r\n    try {\r\n      const item = localStorage.getItem(key);\r\n      return item ? JSON.parse(item) : defaultValue;\r\n    } catch (error) {\r\n      console.error('Error reading from localStorage', error);\r\n      return defaultValue;\r\n    }\r\n  }\r\n\r\n  removeItem(key: string): void {\r\n    try {\r\n      localStorage.removeItem(key);\r\n    } catch (error) {\r\n      console.error('Error removing from localStorage', error);\r\n    }\r\n  }\r\n\r\n  clear(): void {\r\n    try {\r\n      localStorage.clear();\r\n    } catch (error) {\r\n      console.error('Error clearing localStorage', error);\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AAMA,OAAM,MAAOA,mBAAmB;EAE9BC,YAAA,GAAgB;EAEhBC,OAAOA,CAACC,GAAW,EAAEC,KAAU;IAC7B,IAAI;MACF,MAAMC,eAAe,GAAGC,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC;MAC7CI,YAAY,CAACN,OAAO,CAACC,GAAG,EAAEE,eAAe,CAAC;KAC3C,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;;EAExD;EAEAE,OAAOA,CAAIR,GAAW,EAAES,YAAe;IACrC,IAAI;MACF,MAAMC,IAAI,GAAGL,YAAY,CAACG,OAAO,CAACR,GAAG,CAAC;MACtC,OAAOU,IAAI,GAAGP,IAAI,CAACQ,KAAK,CAACD,IAAI,CAAC,GAAGD,YAAY;KAC9C,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,OAAOG,YAAY;;EAEvB;EAEAG,UAAUA,CAACZ,GAAW;IACpB,IAAI;MACFK,YAAY,CAACO,UAAU,CAACZ,GAAG,CAAC;KAC7B,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;;EAE5D;EAEAO,KAAKA,CAAA;IACH,IAAI;MACFR,YAAY,CAACQ,KAAK,EAAE;KACrB,CAAC,OAAOP,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;;EAEvD;EAAC,QAAAQ,CAAA,G;qBArCUjB,mBAAmB;EAAA;EAAA,QAAAkB,EAAA,G;WAAnBlB,mBAAmB;IAAAmB,OAAA,EAAnBnB,mBAAmB,CAAAoB,IAAA;IAAAC,UAAA,EAFlB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}