{"ast":null,"code":"import { clockColors } from '../resources/color-resources/clockColors';\nimport * as i0 from \"@angular/core\";\nexport class ColorService {\n  // Access all clock colors\n  getClockColors() {\n    return clockColors;\n  }\n  // Access specific colors\n  getColorWhenUsedForHoursAndMinutes() {\n    return clockColors.colorWhenUsedForHoursAndMinutes;\n  }\n  getColorWhenUsedForHours() {\n    return clockColors.colorWhenUsedForHours;\n  }\n  getColorWhenUsedForMinutes() {\n    return clockColors.colorWhenUsedForMinutes;\n  }\n  getColorWhenNotUsed() {\n    return clockColors.colorWhenNotUsed;\n  }\n  getClockBackgroundColorStart() {\n    return clockColors.clockBackGroundColorArrayStartColor;\n  }\n  getClockBackgroundColorEnd() {\n    return clockColors.clockBackGroundColorArrayEndColor;\n  }\n  getSecondsCounterArrayStartColor() {\n    return clockColors.secondsCounterArrayStartColor;\n  }\n  getSecondsCounterArrayEndColor() {\n    return clockColors.secondsCounterArrayEndColor;\n  }\n  constructor() {\n    this.currentIndexBackgroundArray = 0;\n    this.currentIndexSecondsCounterArray = 0;\n    this.currentColorIndex = 0;\n    this.letters = '0123456789ABCDEF';\n    this.colorsArrayBackGround = [];\n    // properties used for generating a colors array for the background color\n    this.startColor = this.getClockBackgroundColorStart();\n    this.endColor = this.getClockBackgroundColorEnd();\n    this.steps = 60;\n    this.colorsArraySecondsCounter = [];\n    // properties used for generating a colors array for the background color\n    // set steps = 2 if you want the 2 colors to switch each second\n    // set steps = 60 if you want the color to shift from the first to next color over 1 minute\n    // feel free to play around with these settings\n    this.startColorSecondsCounter = this.getSecondsCounterArrayStartColor();\n    this.endColorSecondsCounter = 'rgb(255, 255, 255)';\n    this.stepsSecondsCounter = 60;\n    this.colorsArrayBackGround = this.generateColorArray(this.startColor, this.endColor, this.steps);\n    this.colorsArraySecondsCounter = this.generateColorArray(this.startColorSecondsCounter, this.endColorSecondsCounter, this.steps);\n  }\n  // the colors array below is used for the second counter shape of the app\n  //colorsArryForSecondsCounterShape : string[] = colorsSam;\n  getColorsArryForBackground() {\n    return this.colorsArrayBackGround;\n  }\n  getColorsArryForSecondsCounterShape() {\n    return this.colorsArraySecondsCounter;\n  }\n  // call this method in the ngOnInit() method of the clock.component.ts file if you want to show a random color each second\n  getRandomColor() {\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += this.letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n  // call this method in the ngOnInit() method of the clock.component.ts file if you want to show a predefined color each second\n  // define colors for this method in the colorsArray1 in '../resources/color-resources/colorsArray1' or create your custom array file and call that instead\n  getNextColor() {\n    const color = this.colorsArrayBackGround[this.currentColorIndex];\n    this.currentColorIndex = (this.currentColorIndex + 1) % this.colorsArrayBackGround.length;\n    return color;\n  }\n  getNextColorForBackground() {\n    const color = this.colorsArrayBackGround[this.currentIndexBackgroundArray];\n    this.currentIndexBackgroundArray = (this.currentIndexBackgroundArray + 1) % this.colorsArrayBackGround.length;\n    return color;\n  }\n  getNextColorFromSecondsCounter(array) {\n    const color = array[this.currentIndexSecondsCounterArray];\n    this.currentIndexSecondsCounterArray = (this.currentIndexSecondsCounterArray + 1) % array.length;\n    return color;\n  }\n  // these methods generates an array of colors that gradually changes from the starting color to the end color in a given number of steps (use 60 if you want to match a minute)\n  generateColorArray(startColor, endColor, steps) {\n    const colorsArray = [];\n    const startRGB = this.extractRGBValues(startColor);\n    const endRGB = this.extractRGBValues(endColor);\n    for (let i = 0; i <= steps; i++) {\n      const currentColor = this.interpolateColor(startRGB, endRGB, i / steps);\n      colorsArray.push(`rgb(${currentColor.join(',')})`);\n    }\n    return colorsArray;\n  }\n  extractRGBValues(color) {\n    const matchResult = color.match(/\\d+/g);\n    if (matchResult) {\n      return matchResult.map(Number);\n    } else {\n      console.error('Invalid color format');\n      return [];\n    }\n  }\n  interpolateColor(startColor, endColor, ratio) {\n    return startColor.map((component, index) => Math.round(component + (endColor[index] - component) * ratio));\n  }\n  static #_ = this.ɵfac = function ColorService_Factory(t) {\n    return new (t || ColorService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ColorService,\n    factory: ColorService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["clockColors","ColorService","getClockColors","getColorWhenUsedForHoursAndMinutes","colorWhenUsedForHoursAndMinutes","getColorWhenUsedForHours","colorWhenUsedForHours","getColorWhenUsedForMinutes","colorWhenUsedForMinutes","getColorWhenNotUsed","colorWhenNotUsed","getClockBackgroundColorStart","clockBackGroundColorArrayStartColor","getClockBackgroundColorEnd","clockBackGroundColorArrayEndColor","getSecondsCounterArrayStartColor","secondsCounterArrayStartColor","getSecondsCounterArrayEndColor","secondsCounterArrayEndColor","constructor","currentIndexBackgroundArray","currentIndexSecondsCounterArray","currentColorIndex","letters","colorsArrayBackGround","startColor","endColor","steps","colorsArraySecondsCounter","startColorSecondsCounter","endColorSecondsCounter","stepsSecondsCounter","generateColorArray","getColorsArryForBackground","getColorsArryForSecondsCounterShape","getRandomColor","color","i","Math","floor","random","getNextColor","length","getNextColorForBackground","getNextColorFromSecondsCounter","array","colorsArray","startRGB","extractRGBValues","endRGB","currentColor","interpolateColor","push","join","matchResult","match","map","Number","console","error","ratio","component","index","round","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\apps\\fibonacci-clock-24h-60min-merged\\src\\app\\services\\color.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { clockColors } from '../resources/color-resources/clockColors';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ColorService {\r\n  // Access all clock colors\r\n  getClockColors() {\r\n    return clockColors;\r\n  }\r\n\r\n  // Access specific colors\r\n  getColorWhenUsedForHoursAndMinutes() {\r\n    return clockColors.colorWhenUsedForHoursAndMinutes;\r\n  }\r\n\r\n  getColorWhenUsedForHours() {\r\n    return clockColors.colorWhenUsedForHours;\r\n  }\r\n\r\n  getColorWhenUsedForMinutes() {\r\n    return clockColors.colorWhenUsedForMinutes;\r\n  }\r\n\r\n  getColorWhenNotUsed() {\r\n    return clockColors.colorWhenNotUsed;\r\n  }\r\n\r\n  getClockBackgroundColorStart() {\r\n    return clockColors.clockBackGroundColorArrayStartColor;\r\n  }\r\n\r\n  getClockBackgroundColorEnd() {\r\n    return clockColors.clockBackGroundColorArrayEndColor;\r\n  }\r\n\r\n  getSecondsCounterArrayStartColor() {\r\n    return clockColors.secondsCounterArrayStartColor;\r\n  }\r\n\r\n  getSecondsCounterArrayEndColor() {\r\n    return clockColors.secondsCounterArrayEndColor;\r\n  }\r\n\r\n  public currentIndexBackgroundArray = 0;\r\n  public currentIndexSecondsCounterArray = 0;\r\n  public currentColorIndex = 0;\r\n  private letters = '0123456789ABCDEF';\r\n  public colorsArrayBackGround: string[] = [];\r\n   // properties used for generating a colors array for the background color\r\n   startColor = this.getClockBackgroundColorStart();\r\n   endColor = this.getClockBackgroundColorEnd();\r\n   steps = 60;\r\n   public colorsArraySecondsCounter: string[] = [];\r\n   // properties used for generating a colors array for the background color\r\n   // set steps = 2 if you want the 2 colors to switch each second\r\n   // set steps = 60 if you want the color to shift from the first to next color over 1 minute\r\n   // feel free to play around with these settings\r\n   startColorSecondsCounter = this.getSecondsCounterArrayStartColor();\r\n   endColorSecondsCounter = 'rgb(255, 255, 255)';\r\n   stepsSecondsCounter = 60;\r\n  \r\n  constructor() {\r\n    this.colorsArrayBackGround = this.generateColorArray(this.startColor, this.endColor, this.steps);\r\n    this.colorsArraySecondsCounter = this.generateColorArray(this.startColorSecondsCounter, this.endColorSecondsCounter, this.steps);\r\n  }\r\n  \r\n  // the colors array below is used for the second counter shape of the app\r\n  //colorsArryForSecondsCounterShape : string[] = colorsSam;\r\n\r\n  getColorsArryForBackground(){\r\n    return this.colorsArrayBackGround;\r\n  }\r\n\r\n  getColorsArryForSecondsCounterShape(){\r\n    return this.colorsArraySecondsCounter;\r\n  }\r\n \r\n  // call this method in the ngOnInit() method of the clock.component.ts file if you want to show a random color each second\r\n  getRandomColor(): string {\r\n    let color = '#';\r\n    for (let i = 0; i < 6; i++) {\r\n      color += this.letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  }\r\n\r\n    // call this method in the ngOnInit() method of the clock.component.ts file if you want to show a predefined color each second\r\n    // define colors for this method in the colorsArray1 in '../resources/color-resources/colorsArray1' or create your custom array file and call that instead\r\n\r\n  getNextColor() {\r\n    const color = this.colorsArrayBackGround[this.currentColorIndex];\r\n    this.currentColorIndex = (this.currentColorIndex + 1) % this.colorsArrayBackGround.length;\r\n    return color;\r\n  }\r\n  getNextColorForBackground() {\r\n    const color = this.colorsArrayBackGround[this.currentIndexBackgroundArray];\r\n    this.currentIndexBackgroundArray = (this.currentIndexBackgroundArray + 1) % this.colorsArrayBackGround.length;\r\n    return color;\r\n  }\r\n  \r\n  getNextColorFromSecondsCounter(array: string[]): string {\r\n    const color = array[this.currentIndexSecondsCounterArray];\r\n    this.currentIndexSecondsCounterArray = (this.currentIndexSecondsCounterArray + 1) % array.length;\r\n    return color;\r\n  }\r\n\r\n  // these methods generates an array of colors that gradually changes from the starting color to the end color in a given number of steps (use 60 if you want to match a minute)\r\n  generateColorArray(startColor: string, endColor: string, steps: number): string[] {\r\n    const colorsArray = [];\r\n    const startRGB = this.extractRGBValues(startColor);\r\n    const endRGB = this.extractRGBValues(endColor);\r\n    for (let i = 0; i <= steps; i++) {\r\n      const currentColor = this.interpolateColor(startRGB, endRGB, i / steps);\r\n      colorsArray.push(`rgb(${currentColor.join(',')})`);\r\n    }\r\n    return colorsArray;\r\n  }\r\n\r\n  private extractRGBValues(color: string): number[] {\r\n    const matchResult = color.match(/\\d+/g);\r\n    if (matchResult) {\r\n      return matchResult.map(Number);\r\n    } else {\r\n      console.error('Invalid color format');\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private interpolateColor(startColor: number[], endColor: number[], ratio: number): number[] {\r\n    return startColor.map((component, index) =>\r\n      Math.round(component + (endColor[index] - component) * ratio)\r\n    );\r\n  }\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}