{"ast":null,"code":"import { clockColors } from '../resources/color-resources/clockColors';\nimport * as i0 from \"@angular/core\";\nexport let ColorService = /*#__PURE__*/(() => {\n  class ColorService {\n    // Access all clock colors\n    getClockColors() {\n      return clockColors;\n    }\n    // Access specific colors\n    getColorWhenUsedForHoursAndMinutes() {\n      return clockColors['colorWhenUsedForHoursAndMinutes'];\n    }\n    getColorWhenUsedForHours() {\n      return clockColors['colorWhenUsedForHours'];\n    }\n    getColorWhenUsedForMinutes() {\n      return clockColors['colorWhenUsedForMinutes'];\n    }\n    getColorWhenNotUsed() {\n      return clockColors['colorWhenNotUsed'];\n    }\n    getClockBackgroundColorStart() {\n      return clockColors['clockBackGroundColorArrayStartColor'];\n    }\n    getClockBackgroundColorEnd() {\n      return clockColors['clockBackGroundColorArrayEndColor'];\n    }\n    getSecondsCounterArrayStartColor() {\n      return clockColors['secondsCounterArrayStartColor'];\n    }\n    getSecondsCounterArrayEndColor() {\n      return clockColors['secondsCounterArrayEndColor'];\n    }\n    constructor() {\n      this.currentIndexBackgroundArray = 0;\n      this.currentIndexSecondsCounterArray = 0;\n      this.currentColorIndex = 0;\n      this.letters = '0123456789ABCDEF';\n      // generating a colors array for the background color\n      this.colorsArrayBackGround = [];\n      this.clockBackGroundColorArrayStartColor = this.getClockBackgroundColorStart();\n      this.clockBackGroundColorArrayEndColor = this.getClockBackgroundColorEnd();\n      this.clockBackGroundColorSteps = 60;\n      // generating a colors array for the seconds counter\n      this.colorsArraySecondsCounter = [];\n      this.startColorSecondsCounter = this.getSecondsCounterArrayStartColor();\n      this.endColorSecondsCounter = this.getSecondsCounterArrayEndColor();\n      this.stepsSecondsCounter = 1;\n      this.colorsArrayBackGround = this.generateColorArray(this.clockBackGroundColorArrayStartColor, this.clockBackGroundColorArrayEndColor, this.clockBackGroundColorSteps);\n      this.colorsArraySecondsCounter = this.generateColorArray(this.startColorSecondsCounter, this.endColorSecondsCounter, this.stepsSecondsCounter);\n      console.log('Seconds Counter Colors:', this.colorsArraySecondsCounter);\n    }\n    getColorsArryForBackground() {\n      return this.colorsArrayBackGround;\n    }\n    getColorsArryForSecondsCounterShape() {\n      return this.colorsArraySecondsCounter;\n    }\n    getRandomColor() {\n      let color = '#';\n      for (let i = 0; i < 6; i++) {\n        color += this.letters[Math.floor(Math.random() * 16)];\n      }\n      return color;\n    }\n    // getNextColor() {\n    //   const color = this.colorsArrayBackGround[this.currentColorIndex];\n    //   this.currentColorIndex = (this.currentColorIndex + 1) % this.colorsArrayBackGround.length;\n    //   return color;\n    // }\n    getNextColorForBackground() {\n      const color = this.colorsArrayBackGround[this.currentIndexBackgroundArray];\n      this.currentIndexBackgroundArray = (this.currentIndexBackgroundArray + 1) % this.colorsArrayBackGround.length;\n      return color;\n    }\n    getNextColorFromSecondsCounter(array) {\n      const color = array[this.currentIndexSecondsCounterArray];\n      this.currentIndexSecondsCounterArray = (this.currentIndexSecondsCounterArray + 1) % this.colorsArraySecondsCounter.length;\n      return color;\n    }\n    // these methods generates an array of colors that gradually changes from the starting color to the end color in a given number of steps (use 60 if you want to match a minute)\n    generateColorArray(startColor, endColor, steps) {\n      const colorsArray = [];\n      const startRGB = this.extractRGBValues(startColor);\n      const endRGB = this.extractRGBValues(endColor);\n      for (let i = 0; i <= steps; i++) {\n        const currentColor = this.interpolateColor(startRGB, endRGB, i / steps);\n        colorsArray.push(`rgb(${currentColor.join(',')})`);\n      }\n      return colorsArray;\n    }\n    extractRGBValues(color) {\n      const matchResult = color.match(/\\d+/g);\n      if (matchResult) {\n        return matchResult.map(Number);\n      } else {\n        console.error('Invalid color format');\n        return [];\n      }\n    }\n    interpolateColor(startColor, endColor, ratio) {\n      return startColor.map((component, index) => Math.round(component + (endColor[index] - component) * ratio));\n    }\n    static #_ = this.ɵfac = function ColorService_Factory(t) {\n      return new (t || ColorService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ColorService,\n      factory: ColorService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ColorService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}