{"ast":null,"code":"import { clockColors } from '../resources/color-resources/clockColors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./local-storage.service\";\nexport let ColorService = /*#__PURE__*/(() => {\n  class ColorService {\n    constructor(localStorageService) {\n      this.localStorageService = localStorageService;\n      this.CLOCK_COLORS_KEY = 'clockColors';\n      this.currentIndexBackgroundArray = 0;\n      this.currentIndexSecondsCounterArray = 0;\n      this.currentColorIndex = 0;\n      this.letters = '0123456789ABCDEF';\n      // generating a colors array for the background color\n      this.colorsArrayBackGround = [];\n      // generating a colors array for the seconds counter\n      this.colorsArraySecondsCounter = [];\n      // Load colors from localStorage or use defaults\n      this.colors = this.localStorageService.getItem(this.CLOCK_COLORS_KEY, {\n        ...clockColors\n      });\n      this.regenerateColorArrays();\n    }\n    // Access all clock colors\n    getClockColors() {\n      return this.colors;\n    }\n    // Update a specific color and save to localStorage\n    updateColor(colorKey, colorValue) {\n      this.colors[colorKey] = colorValue;\n      this.saveColors();\n      this.regenerateColorArrays();\n    }\n    // Save all colors to localStorage\n    saveColors() {\n      this.localStorageService.setItem(this.CLOCK_COLORS_KEY, this.colors);\n    }\n    // Reset colors to default\n    resetColors() {\n      this.colors = {\n        ...clockColors\n      };\n      this.saveColors();\n      this.regenerateColorArrays();\n    }\n    // Regenerate color arrays based on current color settings\n    regenerateColorArrays() {\n      const clockBackGroundColorArrayStartColor = this.getClockBackgroundColorStart();\n      const clockBackGroundColorArrayEndColor = this.getClockBackgroundColorEnd();\n      const clockBackGroundColorSteps = 60;\n      const startColorSecondsCounter = this.getSecondsCounterArrayStartColor();\n      const endColorSecondsCounter = this.getSecondsCounterArrayEndColor();\n      const stepsSecondsCounter = 1;\n      this.colorsArrayBackGround = this.generateColorArray(clockBackGroundColorArrayStartColor, clockBackGroundColorArrayEndColor, clockBackGroundColorSteps);\n      this.colorsArraySecondsCounter = this.generateColorArray(startColorSecondsCounter, endColorSecondsCounter, stepsSecondsCounter);\n    }\n    // Access specific colors\n    getColorWhenUsedForHoursAndMinutes() {\n      return this.colors['colorWhenUsedForHoursAndMinutes'];\n    }\n    getColorWhenUsedForHours() {\n      return this.colors['colorWhenUsedForHours'];\n    }\n    getColorWhenUsedForMinutes() {\n      return this.colors['colorWhenUsedForMinutes'];\n    }\n    getColorWhenNotUsed() {\n      return this.colors['colorWhenNotUsed'];\n    }\n    getClockBackgroundColorStart() {\n      return this.colors['clockBackGroundColorArrayStartColor'];\n    }\n    getClockBackgroundColorEnd() {\n      return this.colors['clockBackGroundColorArrayEndColor'];\n    }\n    getSecondsCounterArrayStartColor() {\n      return this.colors['secondsCounterArrayStartColor'];\n    }\n    getSecondsCounterArrayEndColor() {\n      return this.colors['secondsCounterArrayEndColor'];\n    }\n    getColorsArryForBackground() {\n      return this.colorsArrayBackGround;\n    }\n    getColorsArryForSecondsCounterShape() {\n      return this.colorsArraySecondsCounter;\n    }\n    getRandomColor() {\n      let color = '#';\n      for (let i = 0; i < 6; i++) {\n        color += this.letters[Math.floor(Math.random() * 16)];\n      }\n      return color;\n    }\n    getNextColorForBackground() {\n      const color = this.colorsArrayBackGround[this.currentIndexBackgroundArray];\n      this.currentIndexBackgroundArray = (this.currentIndexBackgroundArray + 1) % this.colorsArrayBackGround.length;\n      return color;\n    }\n    getNextColorFromSecondsCounter(array) {\n      const color = array[this.currentIndexSecondsCounterArray];\n      this.currentIndexSecondsCounterArray = (this.currentIndexSecondsCounterArray + 1) % this.colorsArraySecondsCounter.length;\n      return color;\n    }\n    // these methods generates an array of colors that gradually changes from the starting color to the end color in a given number of steps\n    generateColorArray(startColor, endColor, steps) {\n      const colorsArray = [];\n      const startRGB = this.extractRGBValues(startColor);\n      const endRGB = this.extractRGBValues(endColor);\n      for (let i = 0; i <= steps; i++) {\n        const currentColor = this.interpolateColor(startRGB, endRGB, i / steps);\n        colorsArray.push(`rgb(${currentColor.join(',')})`);\n      }\n      return colorsArray;\n    }\n    extractRGBValues(color) {\n      const matchResult = color.match(/\\d+/g);\n      if (matchResult) {\n        return matchResult.map(Number);\n      } else {\n        console.error('Invalid color format');\n        return [0, 0, 0]; // Default to black\n      }\n    }\n\n    interpolateColor(startColor, endColor, ratio) {\n      return startColor.map((component, index) => Math.round(component + (endColor[index] - component) * ratio));\n    }\n    static #_ = this.ɵfac = function ColorService_Factory(t) {\n      return new (t || ColorService)(i0.ɵɵinject(i1.LocalStorageService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ColorService,\n      factory: ColorService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ColorService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}