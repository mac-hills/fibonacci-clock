{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/color.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nfunction SettingsComponent_div_9_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 9)(4, \"input\", 10);\n    i0.ɵɵlistener(\"change\", function SettingsComponent_div_9_div_2_Template_input_change_4_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const colorItem_r3 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r4.onColorChange($event, colorItem_r3.key));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\", 11);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"div\", 12);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const colorItem_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"for\", \"color-\" + colorItem_r3.key);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.colorLabels[colorItem_r3.key] || colorItem_r3.key, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"id\", \"color-\" + colorItem_r3.key)(\"value\", colorItem_r3.value);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(colorItem_r3.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"background-color\", colorItem_r3.value);\n  }\n}\nfunction SettingsComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 5);\n    i0.ɵɵtemplate(2, SettingsComponent_div_9_div_2_Template, 8, 7, \"div\", 6);\n    i0.ɵɵpipe(3, \"keyvalue\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 7)(5, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function SettingsComponent_div_9_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.backToClock());\n    });\n    i0.ɵɵtext(6, \"Back to Clock\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function SettingsComponent_div_9_Template_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.resetColors());\n    });\n    i0.ɵɵtext(8, \"Reset to Default\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(3, 1, ctx_r0.clockColors));\n  }\n}\nfunction SettingsComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2, \"Understanding Time with the Fibonacci Clock\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4, \" The Fibonacci Clock is based on the mathematical sequence created by the Italian mathematician Fibonacci in the 13th century. Beginning with 1 and 1, each subsequent number is the sum of the two preceding ones. The clock utilizes the initial terms of this sequence: 1, 1, 2, 3, 5, 8, 13, 21, and 34. \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"h3\");\n    i0.ɵɵtext(6, \"Shapes\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"p\");\n    i0.ɵɵtext(8, \" The display consists of shapes, each sized according to the initial Fibonacci numbers: 1, 1, 2, 3... The smallest shape represents a 1. The largest shape represents 34. The other shapes from small to large represent 2, 3, 5, 8, 13, and 21. \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"h3\");\n    i0.ɵɵtext(10, \"Calculate Time\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"p\")(12, \"strong\");\n    i0.ɵɵtext(13, \"Hour:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(14, \" Sum up the values of the shapes depicted in the colors that represent the hour and the shapes that represent hours and minutes. \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"p\")(16, \"strong\");\n    i0.ɵɵtext(17, \"Minutes:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(18, \" Sum up the values of the shapes depicted in the colors that represent the minutes and the shapes that represent hours and minutes. \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"p\")(20, \"strong\");\n    i0.ɵɵtext(21, \"Seconds:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(22, \" Seconds are depicted in a color-changing shape, transitioning every second. Additionally, the background darkens every second, and after a minute passes, it returns to its original lighter state. \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"div\", 7)(24, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function SettingsComponent_div_10_Template_button_click_24_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.backToClock());\n    });\n    i0.ɵɵtext(25, \"Back to Clock\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nexport let SettingsComponent = /*#__PURE__*/(() => {\n  class SettingsComponent {\n    constructor(colorService, router) {\n      this.colorService = colorService;\n      this.router = router;\n      this.clockColors = {};\n      this.colorLabels = {\n        colorWhenUsedForHoursAndMinutes: 'Hours and Minutes',\n        colorWhenUsedForHours: 'Hours Only',\n        colorWhenUsedForMinutes: 'Minutes Only',\n        colorWhenNotUsed: 'Not Used',\n        clockBackGroundColorArrayStartColor: 'Background Start Color',\n        clockBackGroundColorArrayEndColor: 'Background End Color',\n        secondsCounterArrayStartColor: 'Seconds Counter Start',\n        secondsCounterArrayEndColor: 'Seconds Counter End'\n      };\n      // Active tab state\n      this.activeTab = 'colorSettings';\n    }\n    ngOnInit() {\n      this.clockColors = {\n        ...this.colorService.getClockColors()\n      };\n    }\n    onColorChange(event, colorKey) {\n      const input = event.target;\n      if (input && input.value) {\n        this.updateColor(colorKey, input.value);\n      }\n    }\n    updateColor(colorKey, colorValue) {\n      this.clockColors[colorKey] = colorValue;\n      this.colorService.updateColor(colorKey, colorValue);\n    }\n    resetColors() {\n      this.colorService.resetColors();\n      this.clockColors = {\n        ...this.colorService.getClockColors()\n      };\n    }\n    // Handle the promise returned by navigate\n    backToClock() {\n      this.router.navigate(['/clock']).catch(err => {\n        console.error('Navigation failed:', err);\n      });\n    }\n    // Set the active tab\n    setActiveTab(tab) {\n      this.activeTab = tab;\n    }\n    static #_ = this.ɵfac = function SettingsComponent_Factory(t) {\n      return new (t || SettingsComponent)(i0.ɵɵdirectiveInject(i1.ColorService), i0.ɵɵdirectiveInject(i2.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SettingsComponent,\n      selectors: [[\"app-settings\"]],\n      decls: 11,\n      vars: 6,\n      consts: [[1, \"settings-container\"], [1, \"tab-menu\"], [3, \"click\"], [1, \"tab-content\"], [4, \"ngIf\"], [1, \"color-settings\"], [\"class\", \"color-setting\", 4, \"ngFor\", \"ngForOf\"], [1, \"actions\"], [1, \"color-setting\"], [1, \"color-input-container\"], [\"type\", \"color\", 3, \"id\", \"value\", \"change\"], [1, \"color-value\"], [1, \"color-preview\"]],\n      template: function SettingsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n          i0.ɵɵtext(2, \"Settings\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"div\", 1)(4, \"button\", 2);\n          i0.ɵɵlistener(\"click\", function SettingsComponent_Template_button_click_4_listener() {\n            return ctx.setActiveTab(\"colorSettings\");\n          });\n          i0.ɵɵtext(5, \" Color Settings \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"button\", 2);\n          i0.ɵɵlistener(\"click\", function SettingsComponent_Template_button_click_6_listener() {\n            return ctx.setActiveTab(\"readingClock\");\n          });\n          i0.ɵɵtext(7, \" Reading the Clock \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"div\", 3);\n          i0.ɵɵtemplate(9, SettingsComponent_div_9_Template, 9, 3, \"div\", 4);\n          i0.ɵɵtemplate(10, SettingsComponent_div_10_Template, 26, 0, \"div\", 4);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵclassProp(\"active\", ctx.activeTab === \"colorSettings\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵclassProp(\"active\", ctx.activeTab === \"readingClock\");\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.activeTab === \"colorSettings\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.activeTab === \"readingClock\");\n        }\n      },\n      dependencies: [i3.NgForOf, i3.NgIf, i3.KeyValuePipe],\n      styles: [\".tab-menu[_ngcontent-%COMP%]{display:flex;justify-content:center;margin-bottom:20px}.tab-menu[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{padding:10px 20px;margin:0 5px;background-color:#e0e0e0;border:none;border-radius:4px;cursor:pointer;font-size:16px;font-weight:700;transition:background-color .3s ease}.tab-menu[_ngcontent-%COMP%]   button.active[_ngcontent-%COMP%]{background-color:#4caf50;color:#fff}.tab-menu[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover{background-color:#d5d5d5}.tab-content[_ngcontent-%COMP%]{padding:20px;background-color:#fff;border-radius:8px;box-shadow:0 2px 4px #0000001a}.tab-content[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{margin-top:0}.tab-content[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin-bottom:15px;line-height:1.6}.tab-content[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{margin-top:20px;margin-bottom:10px}.settings-container[_ngcontent-%COMP%]{max-width:600px;margin:0 auto;padding:20px;background-color:#f5f5f5;border-radius:8px;box-shadow:0 2px 4px #0000001a;font-family:Calibri,sans-serif}h1[_ngcontent-%COMP%]{text-align:center;margin-bottom:20px}.color-settings[_ngcontent-%COMP%]{display:grid;grid-template-columns:repeat(auto-fill,minmax(250px,1fr));gap:15px}.color-setting[_ngcontent-%COMP%]{margin-bottom:15px}label[_ngcontent-%COMP%]{display:block;margin-bottom:5px;font-weight:500}.color-input-container[_ngcontent-%COMP%]{display:flex;align-items:center}input[type=color][_ngcontent-%COMP%]{width:50px;height:30px;border:none;border-radius:4px;cursor:pointer}.color-value[_ngcontent-%COMP%]{margin-left:10px;font-family:monospace}.color-preview[_ngcontent-%COMP%]{width:30px;height:30px;border-radius:4px;margin-left:10px;border:1px solid #ccc}.actions[_ngcontent-%COMP%]{display:flex;justify-content:space-between;margin-top:20px}button[_ngcontent-%COMP%]{padding:10px 15px;background-color:#4caf50;color:#fff;border:none;border-radius:4px;cursor:pointer;font-size:14px}button[_ngcontent-%COMP%]:hover{background-color:#45a049}\"]\n    });\n  }\n  return SettingsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}